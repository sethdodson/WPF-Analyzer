<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Thinktecture.Text.Encoding.Abstractions</name>
    </assembly>
    <members>
        <member name="T:Thinktecture.DecoderExtensions">
            <summary>
            Extensions for <see cref="T:System.Text.Decoder"/>.
            </summary>
        </member>
        <member name="M:Thinktecture.DecoderExtensions.ToInterface(System.Text.Decoder)">
            <summary>
            Converts provided decoder to <see cref="T:Thinktecture.Text.IDecoder"/>.
            </summary>
            <param name="decoder">Decoder to convert.</param>
            <returns>Converted decoder.</returns>
        </member>
        <member name="T:Thinktecture.EncoderExtensions">
            <summary>
            Extensions for <see cref="T:System.Text.Encoder"/>.
            </summary>
        </member>
        <member name="M:Thinktecture.EncoderExtensions.ToInterface(System.Text.Encoder)">
            <summary>
            Converts provided encoder to <see cref="T:Thinktecture.Text.IEncoder"/>.
            </summary>
            <param name="encoder">Encoder to convert.</param>
            <returns>Converted encoder.</returns>
        </member>
        <member name="T:Thinktecture.EncodingExtensions">
            <summary>
            Extensions for <see cref="T:System.Text.Encoding"/>.
            </summary>
        </member>
        <member name="M:Thinktecture.EncodingExtensions.ToInterface(System.Text.Encoding)">
            <summary>
            Converts provided encoding to <see cref="T:Thinktecture.Text.IEncoding"/>.
            </summary>
            <param name="encoding">Encoding to convert.</param>
            <returns>Converted encoding.</returns>
        </member>
        <member name="T:Thinktecture.Text.Adapters.DecoderAdapter">
            <summary>
            Adapter for <see cref="T:System.Text.Decoder"/>.
            </summary>
        </member>
        <member name="M:Thinktecture.Text.Adapters.DecoderAdapter.UnsafeConvert">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.DecoderAdapter.#ctor(System.Text.Decoder)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.Text.Adapters.DecoderAdapter" /> class.
            </summary>
            <param name="decoder">Decoder to be used by the adapter.</param>
        </member>
        <member name="M:Thinktecture.Text.Adapters.DecoderAdapter.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.DecoderAdapter.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.DecoderAdapter.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.DecoderAdapter.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.DecoderAdapter.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.DecoderAdapter.Reset">
            <inheritdoc />
        </member>
        <member name="T:Thinktecture.Text.Adapters.EncoderAdapter">
            <summary>
            Adapter for <see cref="T:System.Text.Encoder"/>.
            </summary>
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncoderAdapter.UnsafeConvert">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncoderAdapter.#ctor(System.Text.Encoder)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.Text.Adapters.EncoderAdapter" /> class.
            </summary>
            <param name="encoder"></param>
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncoderAdapter.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncoderAdapter.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncoderAdapter.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Thinktecture.Text.Adapters.EncodingAdapter">
            <summary>
            Adapter for <see cref="T:System.Text.Encoding"/>.
            </summary>
        </member>
        <member name="P:Thinktecture.Text.Adapters.EncodingAdapter.BigEndianUnicode">
            <summary>Gets an encoding for the UTF-16 format that uses the big endian byte order.</summary>
            <returns>An encoding object for the UTF-16 format that uses the big endian byte order.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Thinktecture.Text.Adapters.EncodingAdapter.Unicode">
            <summary>Gets an encoding for the UTF-16 format using the little endian byte order.</summary>
            <returns>An encoding for the UTF-16 format using the little endian byte order.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Thinktecture.Text.Adapters.EncodingAdapter.UTF8">
            <summary>Gets an encoding for the UTF-8 format.</summary>
            <returns>An encoding for the UTF-8 format.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.Convert(Thinktecture.Text.IEncoding,Thinktecture.Text.IEncoding,System.Byte[])">
            <summary>Converts an entire byte array from one encoding to another.</summary>
            <returns>An array of type <see cref="T:System.Byte" /> containing the results of converting <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</returns>
            <param name="srcEncoding">The encoding format of <paramref name="bytes" />. </param>
            <param name="dstEncoding">The target encoding format. </param>
            <param name="bytes">The bytes to convert. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="srcEncoding" /> is null.-or- <paramref name="dstEncoding" /> is null.-or- <paramref name="bytes" /> is null. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-srcEncoding.<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-dstEncoding.<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.Convert(Thinktecture.Text.IEncoding,System.Text.Encoding,System.Byte[])">
            <summary>Converts an entire byte array from one encoding to another.</summary>
            <returns>An array of type <see cref="T:System.Byte" /> containing the results of converting <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</returns>
            <param name="srcEncoding">The encoding format of <paramref name="bytes" />. </param>
            <param name="dstEncoding">The target encoding format. </param>
            <param name="bytes">The bytes to convert. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="srcEncoding" /> is null.-or- <paramref name="dstEncoding" /> is null.-or- <paramref name="bytes" /> is null. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-srcEncoding.<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-dstEncoding.<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.Convert(System.Text.Encoding,Thinktecture.Text.IEncoding,System.Byte[])">
            <summary>Converts an entire byte array from one encoding to another.</summary>
            <returns>An array of type <see cref="T:System.Byte" /> containing the results of converting <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</returns>
            <param name="srcEncoding">The encoding format of <paramref name="bytes" />. </param>
            <param name="dstEncoding">The target encoding format. </param>
            <param name="bytes">The bytes to convert. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="srcEncoding" /> is null.-or- <paramref name="dstEncoding" /> is null.-or- <paramref name="bytes" /> is null. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-srcEncoding.<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-dstEncoding.<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
            <summary>Converts an entire byte array from one encoding to another.</summary>
            <returns>An array of type <see cref="T:System.Byte" /> containing the results of converting <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</returns>
            <param name="srcEncoding">The encoding format of <paramref name="bytes" />. </param>
            <param name="dstEncoding">The target encoding format. </param>
            <param name="bytes">The bytes to convert. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="srcEncoding" /> is null.-or- <paramref name="dstEncoding" /> is null.-or- <paramref name="bytes" /> is null. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-srcEncoding.<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-dstEncoding.<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.Convert(Thinktecture.Text.IEncoding,Thinktecture.Text.IEncoding,System.Byte[],System.Int32,System.Int32)">
            <summary>Converts a range of bytes in a byte array from one encoding to another.</summary>
            <returns>An array of type <see cref="T:System.Byte" /> containing the result of converting a range of bytes in <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</returns>
            <param name="srcEncoding">The encoding of the source array, <paramref name="bytes" />. </param>
            <param name="dstEncoding">The encoding of the output array. </param>
            <param name="bytes">The array of bytes to convert. </param>
            <param name="index">The index of the first element of <paramref name="bytes" /> to convert. </param>
            <param name="count">The number of bytes to convert. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="srcEncoding" /> is null.-or- <paramref name="dstEncoding" /> is null.-or- <paramref name="bytes" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the byte array. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-srcEncoding.<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-dstEncoding.<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.Convert(Thinktecture.Text.IEncoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
            <summary>Converts a range of bytes in a byte array from one encoding to another.</summary>
            <returns>An array of type <see cref="T:System.Byte" /> containing the result of converting a range of bytes in <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</returns>
            <param name="srcEncoding">The encoding of the source array, <paramref name="bytes" />. </param>
            <param name="dstEncoding">The encoding of the output array. </param>
            <param name="bytes">The array of bytes to convert. </param>
            <param name="index">The index of the first element of <paramref name="bytes" /> to convert. </param>
            <param name="count">The number of bytes to convert. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="srcEncoding" /> is null.-or- <paramref name="dstEncoding" /> is null.-or- <paramref name="bytes" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the byte array. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-srcEncoding.<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-dstEncoding.<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.Convert(System.Text.Encoding,Thinktecture.Text.IEncoding,System.Byte[],System.Int32,System.Int32)">
            <summary>Converts a range of bytes in a byte array from one encoding to another.</summary>
            <returns>An array of type <see cref="T:System.Byte" /> containing the result of converting a range of bytes in <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</returns>
            <param name="srcEncoding">The encoding of the source array, <paramref name="bytes" />. </param>
            <param name="dstEncoding">The encoding of the output array. </param>
            <param name="bytes">The array of bytes to convert. </param>
            <param name="index">The index of the first element of <paramref name="bytes" /> to convert. </param>
            <param name="count">The number of bytes to convert. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="srcEncoding" /> is null.-or- <paramref name="dstEncoding" /> is null.-or- <paramref name="bytes" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the byte array. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-srcEncoding.<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-dstEncoding.<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
            <summary>Converts a range of bytes in a byte array from one encoding to another.</summary>
            <returns>An array of type <see cref="T:System.Byte" /> containing the result of converting a range of bytes in <paramref name="bytes" /> from <paramref name="srcEncoding" /> to <paramref name="dstEncoding" />.</returns>
            <param name="srcEncoding">The encoding of the source array, <paramref name="bytes" />. </param>
            <param name="dstEncoding">The encoding of the output array. </param>
            <param name="bytes">The array of bytes to convert. </param>
            <param name="index">The index of the first element of <paramref name="bytes" /> to convert. </param>
            <param name="count">The number of bytes to convert. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="srcEncoding" /> is null.-or- <paramref name="dstEncoding" /> is null.-or- <paramref name="bytes" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the byte array. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-srcEncoding.<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-dstEncoding.<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetEncoding(System.String)">
            <summary>Returns the encoding associated with the specified code page name.</summary>
            <returns>The encoding  associated with the specified code page.</returns>
            <param name="name">The code page name of the preferred encoding. Any value returned by the <see cref="P:System.Text.Encoding.WebName" /> property is valid. Possible values are listed in the Name column of the table that appears in the <see cref="T:System.Text.Encoding" /> class topic.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="name" /> is not a valid code page name.-or- The code page indicated by <paramref name="name" /> is not supported by the underlying platform. </exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.UnsafeConvert">
            <inheritdoc />
        </member>
        <member name="P:Thinktecture.Text.Adapters.EncodingAdapter.WebName">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.#ctor(System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Thinktecture.Text.Adapters.EncodingAdapter" /> class.
            </summary>
            <param name="encoding">Encoding to be used by the adapter.</param>
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetByteCount(System.Char[])">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetByteCount(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetBytes(System.Char[])">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetBytes(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetBytes(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetCharCount(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetChars(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetChars(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetDecoder">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetEncoder">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetMaxByteCount(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetMaxCharCount(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetPreamble">
            <inheritdoc />
        </member>
        <member name="M:Thinktecture.Text.Adapters.EncodingAdapter.GetString(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Thinktecture.Text.IDecoder">
            <summary>Converts a sequence of encoded bytes into a set of characters.</summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IDecoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>Converts an array of encoded bytes to UTF-16 encoded characters and stores the result in a character array.</summary>
            <param name="bytes">A byte array to convert.</param>
            <param name="byteIndex">The first element of <paramref name="bytes" /> to convert.</param>
            <param name="byteCount">The number of elements of <paramref name="bytes" /> to convert.</param>
            <param name="chars">An array to store the converted characters.</param>
            <param name="charIndex">The first element of <paramref name="chars" /> in which data is stored.</param>
            <param name="charCount">The maximum number of elements of <paramref name="chars" /> to use in the conversion.</param>
            <param name="flush">true to indicate that no further data is to be converted; otherwise, false.</param>
            <param name="bytesUsed">When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.</param>
            <param name="charsUsed">When this method returns, contains the number of characters from <paramref name="chars" /> that were produced by the conversion. This parameter is passed uninitialized.</param>
            <param name="completed">When this method returns, contains true if all the characters specified by <paramref name="byteCount" /> were converted; otherwise, false. This parameter is passed uninitialized.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="chars" /> or <paramref name="bytes" /> is null (Nothing).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="charIndex" />, <paramref name="charCount" />, <paramref name="byteIndex" />, or <paramref name="byteCount" /> is less than zero.-or-The length of <paramref name="chars" /> - <paramref name="charIndex" /> is less than <paramref name="charCount" />.-or-The length of <paramref name="bytes" /> - <paramref name="byteIndex" /> is less than <paramref name="byteCount" />.</exception>
            <exception cref="T:System.ArgumentException">The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <see cref="M:Thinktecture.Text.IDecoder.GetCharCount(System.Byte[],System.Int32,System.Int32)" /> method.</exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)-and-<see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IDecoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</summary>
            <returns>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</returns>
            <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
            <param name="index">The index of the first byte to decode. </param>
            <param name="count">The number of bytes to decode. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bytes" /> is null (Nothing). </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)-and-<see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IDecoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array. A parameter indicates whether to clear the internal state of the decoder after the calculation.</summary>
            <returns>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</returns>
            <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
            <param name="index">The index of the first byte to decode. </param>
            <param name="count">The number of bytes to decode. </param>
            <param name="flush">true to simulate clearing the internal state of the encoder after the calculation; otherwise, false. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bytes" /> is null (Nothing). </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)-and-<see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IDecoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.</summary>
            <returns>The actual number of characters written into <paramref name="chars" />.</returns>
            <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
            <param name="byteIndex">The index of the first byte to decode. </param>
            <param name="byteCount">The number of bytes to decode. </param>
            <param name="chars">The character array to contain the resulting set of characters. </param>
            <param name="charIndex">The index at which to start writing the resulting set of characters. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bytes" /> is null (Nothing).-or- <paramref name="chars" /> is null (Nothing). </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.-or- <paramref name="byteIndex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.-or- <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />. </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)-and-<see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IDecoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
            <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array. A parameter indicates whether to clear the internal state of the decoder after the conversion.</summary>
            <returns>The actual number of characters written into the <paramref name="chars" /> parameter.</returns>
            <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
            <param name="byteIndex">The index of the first byte to decode. </param>
            <param name="byteCount">The number of bytes to decode. </param>
            <param name="chars">The character array to contain the resulting set of characters. </param>
            <param name="charIndex">The index at which to start writing the resulting set of characters. </param>
            <param name="flush">true to clear the internal state of the decoder after the conversion; otherwise, false. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bytes" /> is null (Nothing).-or- <paramref name="chars" /> is null (Nothing). </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.-or- <paramref name="byteIndex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.-or- <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />. </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)-and-<see cref="P:System.Text.Decoder.Fallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IDecoder.Reset">
            <summary>When overridden in a derived class, sets the decoder back to its initial state.</summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Thinktecture.Text.IEncoder">
            <summary>Converts a set of characters into a sequence of bytes.</summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>Converts an array of Unicode characters to an encoded byte sequence and stores the result in an array of bytes.</summary>
            <param name="chars">An array of characters to convert.</param>
            <param name="charIndex">The first element of <paramref name="chars" /> to convert.</param>
            <param name="charCount">The number of elements of <paramref name="chars" /> to convert.</param>
            <param name="bytes">An array where the converted bytes are stored.</param>
            <param name="byteIndex">The first element of <paramref name="bytes" /> in which data is stored.</param>
            <param name="byteCount">The maximum number of elements of <paramref name="bytes" /> to use in the conversion.</param>
            <param name="flush">true to indicate no further data is to be converted; otherwise, false.</param>
            <param name="charsUsed">When this method returns, contains the number of characters from <paramref name="chars" /> that were used in the conversion. This parameter is passed uninitialized.</param>
            <param name="bytesUsed">When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.</param>
            <param name="completed">When this method returns, contains true if all the characters specified by <paramref name="charCount" /> were converted; otherwise, false. This parameter is passed uninitialized.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="chars" /> or <paramref name="bytes" /> is null (Nothing).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="charIndex" />, <paramref name="charCount" />, <paramref name="byteIndex" />, or <paramref name="byteCount" /> is less than zero.-or-The length of <paramref name="chars" /> - <paramref name="charIndex" /> is less than <paramref name="charCount" />.-or-The length of <paramref name="bytes" /> - <paramref name="byteIndex" /> is less than <paramref name="byteCount" />.</exception>
            <exception cref="T:System.ArgumentException">The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <see cref="M:Thinktecture.Text.IEncoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)" /> method.</exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)-and-<see cref="P:System.Text.Encoder.Fallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
            <summary>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array. A parameter indicates whether to clear the internal state of the encoder after the calculation.</summary>
            <returns>The number of bytes produced by encoding the specified characters and any characters in the internal buffer.</returns>
            <param name="chars">The character array containing the set of characters to encode. </param>
            <param name="index">The index of the first character to encode. </param>
            <param name="count">The number of characters to encode. </param>
            <param name="flush">true to simulate clearing the internal state of the encoder after the calculation; otherwise, false. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="chars" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />. </exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)-and-<see cref="P:System.Text.Encoder.Fallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
            <summary>When overridden in a derived class, encodes a set of characters from the specified character array and any characters in the internal buffer into the specified byte array. A parameter indicates whether to clear the internal state of the encoder after the conversion.</summary>
            <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
            <param name="chars">The character array containing the set of characters to encode. </param>
            <param name="charIndex">The index of the first character to encode. </param>
            <param name="charCount">The number of characters to encode. </param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes. </param>
            <param name="flush">true to clear the internal state of the encoder after the conversion; otherwise, false. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="chars" /> is null (Nothing).-or- <paramref name="bytes" /> is null (Nothing). </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)-and-<see cref="P:System.Text.Encoder.Fallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Thinktecture.Text.IEncoding">
            <summary>Represents a character encoding.To browse the .NET Framework source code for this type, see the Reference Source.</summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Thinktecture.Text.IEncoding.WebName">
            <summary>When overridden in a derived class, gets the name registered with the Internet Assigned Numbers Authority (IANA) for the current encoding.</summary>
            <returns>The IANA name for the current <see cref="T:System.Text.Encoding" />.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoding.GetByteCount(System.Char[])">
            <summary>When overridden in a derived class, calculates the number of bytes produced by encoding all the characters in the specified character array.</summary>
            <returns>The number of bytes produced by encoding all the characters in the specified character array.</returns>
            <param name="chars">The character array containing the characters to encode. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="chars" /> is null. </exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.</summary>
            <returns>The number of bytes produced by encoding the specified characters.</returns>
            <param name="chars">The character array containing the set of characters to encode. </param>
            <param name="index">The index of the first character to encode. </param>
            <param name="count">The number of characters to encode. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="chars" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />. </exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoding.GetByteCount(System.String)">
            <summary>When overridden in a derived class, calculates the number of bytes produced by encoding the characters in the specified string.</summary>
            <returns>The number of bytes produced by encoding the specified characters.</returns>
            <param name="s">The string containing the set of characters to encode. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="s" /> is null. </exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoding.GetBytes(System.Char[])">
            <summary>When overridden in a derived class, encodes all the characters in the specified character array into a sequence of bytes.</summary>
            <returns>A byte array containing the results of encoding the specified set of characters.</returns>
            <param name="chars">The character array containing the characters to encode. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="chars" /> is null. </exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoding.GetBytes(System.Char[],System.Int32,System.Int32)">
            <summary>When overridden in a derived class, encodes a set of characters from the specified character array into a sequence of bytes.</summary>
            <returns>A byte array containing the results of encoding the specified set of characters.</returns>
            <param name="chars">The character array containing the set of characters to encode. </param>
            <param name="index">The index of the first character to encode. </param>
            <param name="count">The number of characters to encode. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="chars" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="chars" />. </exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.</summary>
            <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
            <param name="chars">The character array containing the set of characters to encode. </param>
            <param name="charIndex">The index of the first character to encode. </param>
            <param name="charCount">The number of characters to encode. </param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="chars" /> is null.-or- <paramref name="bytes" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="chars" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoding.GetBytes(System.String)">
            <summary>When overridden in a derived class, encodes all the characters in the specified string into a sequence of bytes.</summary>
            <returns>A byte array containing the results of encoding the specified set of characters.</returns>
            <param name="s">The string containing the characters to encode. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="s" /> is null. </exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>When overridden in a derived class, encodes a set of characters from the specified string into the specified byte array.</summary>
            <returns>The actual number of bytes written into <paramref name="bytes" />.</returns>
            <param name="s">The string containing the set of characters to encode. </param>
            <param name="charIndex">The index of the first character to encode. </param>
            <param name="charCount">The number of characters to encode. </param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes. </param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="s" /> is null.-or- <paramref name="bytes" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="charIndex" /> or <paramref name="charCount" /> or <paramref name="byteIndex" /> is less than zero.-or- <paramref name="charIndex" /> and <paramref name="charCount" /> do not denote a valid range in <paramref name="s" />.-or- <paramref name="byteIndex" /> is not a valid index in <paramref name="bytes" />. </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="bytes" /> does not have enough capacity from <paramref name="byteIndex" /> to the end of the array to accommodate the resulting bytes. </exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoding.GetCharCount(System.Byte[])">
            <summary>When overridden in a derived class, calculates the number of characters produced by decoding all the bytes in the specified byte array.</summary>
            <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
            <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bytes" /> is null. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</summary>
            <returns>The number of characters produced by decoding the specified sequence of bytes.</returns>
            <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
            <param name="index">The index of the first byte to decode. </param>
            <param name="count">The number of bytes to decode. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bytes" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoding.GetChars(System.Byte[])">
            <summary>When overridden in a derived class, decodes all the bytes in the specified byte array into a set of characters.</summary>
            <returns>A character array containing the results of decoding the specified sequence of bytes.</returns>
            <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bytes" /> is null. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoding.GetChars(System.Byte[],System.Int32,System.Int32)">
            <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a set of characters.</summary>
            <returns>A character array containing the results of decoding the specified sequence of bytes.</returns>
            <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
            <param name="index">The index of the first byte to decode. </param>
            <param name="count">The number of bytes to decode. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bytes" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.</summary>
            <returns>The actual number of characters written into <paramref name="chars" />.</returns>
            <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
            <param name="byteIndex">The index of the first byte to decode. </param>
            <param name="byteCount">The number of bytes to decode. </param>
            <param name="chars">The character array to contain the resulting set of characters. </param>
            <param name="charIndex">The index at which to start writing the resulting set of characters. </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bytes" /> is null.-or- <paramref name="chars" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="byteIndex" /> or <paramref name="byteCount" /> or <paramref name="charIndex" /> is less than zero.-or- <paramref name="byteIndex" /> and <paramref name="byteCount" /> do not denote a valid range in <paramref name="bytes" />.-or- <paramref name="charIndex" /> is not a valid index in <paramref name="chars" />. </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="chars" /> does not have enough capacity from <paramref name="charIndex" /> to the end of the array to accommodate the resulting characters. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoding.GetDecoder">
            <summary>When overridden in a derived class, obtains a decoder that converts an encoded sequence of bytes into a sequence of characters.</summary>
            <returns>A <see cref="T:System.Text.Decoder" /> that converts an encoded sequence of bytes into a sequence of characters.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoding.GetEncoder">
            <summary>When overridden in a derived class, obtains an encoder that converts a sequence of Unicode characters into an encoded sequence of bytes.</summary>
            <returns>A <see cref="T:System.Text.Encoder" /> that converts a sequence of Unicode characters into an encoded sequence of bytes.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoding.GetMaxByteCount(System.Int32)">
            <summary>When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.</summary>
            <returns>The maximum number of bytes produced by encoding the specified number of characters.</returns>
            <param name="charCount">The number of characters to encode. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="charCount" /> is less than zero. </exception>
            <exception cref="T:System.Text.EncoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<see cref="P:System.Text.Encoding.EncoderFallback" /> is set to <see cref="T:System.Text.EncoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoding.GetMaxCharCount(System.Int32)">
            <summary>When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.</summary>
            <returns>The maximum number of characters produced by decoding the specified number of bytes.</returns>
            <param name="byteCount">The number of bytes to decode. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="byteCount" /> is less than zero. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoding.GetPreamble">
            <summary>When overridden in a derived class, returns a sequence of bytes that specifies the encoding used.</summary>
            <returns>A byte array containing a sequence of bytes that specifies the encoding used.-or- A byte array of length zero, if a preamble is not required.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Thinktecture.Text.IEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a string.</summary>
            <returns>A string that contains the results of decoding the specified sequence of bytes.</returns>
            <param name="bytes">The byte array containing the sequence of bytes to decode. </param>
            <param name="index">The index of the first byte to decode. </param>
            <param name="count">The number of bytes to decode. </param>
            <exception cref="T:System.ArgumentException">The byte array contains invalid Unicode code points.</exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="bytes" /> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index" /> or <paramref name="count" /> is less than zero.-or- <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in <paramref name="bytes" />. </exception>
            <exception cref="T:System.Text.DecoderFallbackException">A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)-and-<see cref="P:System.Text.Encoding.DecoderFallback" /> is set to <see cref="T:System.Text.DecoderExceptionFallback" />.</exception>
            <filterpriority>1</filterpriority>
        </member>
    </members>
</doc>
